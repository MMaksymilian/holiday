<mx:Form width="100%" color="0x323232" xmlns:mx="http://www.adobe.com/2006/mxml"  creationComplete="afterComplete()">
    <mx:Button id="addButton" label="Dodaj nowego użytkownika" click="setMode(addMode)"/>
    <mx:Button id="editButton" label="Edycja" click="setMode(editMode)"/>
    <mx:FormHeading fontSize="10"  label="{formTitle(mode)}" paddingTop="0" />

    <mx:FormItem label="Imię: " required="true">
        <mx:TextInput id="fNameAddUser" width="200"/>
    </mx:FormItem>

    <mx:FormItem label="Nazwisko: " required="true">
        <mx:TextInput id="lNameAddUser" width="200"/>
    </mx:FormItem>

    <mx:FormItem label="Login: " required="true">
        <mx:TextInput id="loginAddUser" width="200"/>
    </mx:FormItem>

    <mx:FormItem label="Hasło: " required="true">
        <mx:TextInput id="passwordAddUser" width="200"/>
    </mx:FormItem>

    <mx:FormItem label="Adres e-mail: " required="true">
        <mx:TextInput id="emailAddUser" width="200"/>
    </mx:FormItem>

    <mx:FormItem label="Uprawnienia użytkownika: ">
        <mx:ComboBox id="roleAddUser" dataProvider="{authorities}" width="300" color="0x000000"/>
    </mx:FormItem>

    <mx:FormItem >
        <mx:Button id="submitButton" label="Zatwierdź" cornerRadius="12" click="submitButton_clickHandler(event)"/>
    </mx:FormItem>

    <mx:Script><![CDATA[
        import flex.admin.event.CreateNewUserEvent;
        import flex.common.data.ServiceUser;

        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.rpc.events.ResultEvent;
        import mx.validators.Validator;

        private static var editMode:String = "EditMode";
        private static var addMode:String = "AddMode";

        private var mode:String;

        private var currentUser:ServiceUser;

        [Bindable]
        public var authorities:ArrayCollection = new ArrayCollection(
                [
                    {label:"ADMINISTRATOR/SZEF", data:"ROLE_CHIEF"},
                    {label:"PRACOWNIK", data:"ROLE_USER"}
                ]);

        private var validatorArray:Array;

        private function afterComplete():void {
            setMode(addMode);
            validatorArray = new Array();
            validatorArray.push(passwordValidator);
            validatorArray.push(userNameValidator);
            validatorArray.push(userLastNameValidator);
            validatorArray.push(loginValidator);
            validatorArray.push(emailValidator);
        }

        private function setMode(m:String):void {
            mode = m;
            if (mode == addMode) {
                addButton.enabled = false;
                editButton.enabled = true;
                currentUser = null;
            }
            if (mode == editMode) {
                addButton.enabled = true;
                editButton.enabled = false;
            }
        }

        public function setCurrentUser(serviceUser:ServiceUser) {
            if (mode == editMode) {
                currentUser = serviceUser;
                fNameAddUser.text = currentUser.firstName;
                lNameAddUser.text = currentUser.lastName;
                loginAddUser.text = currentUser.login;
                passwordAddUser.text = currentUser.password;
                emailAddUser.text = currentUser.email;
                roleAddUser.selectedItem = currentUser.role;

                for (var index:int = 0; index < roleAddUser.dataProvider.length; index++) {
                    if (currentUser.role == roleAddUser.dataProvider.getItemAt(index).data) {
                        roleAddUser.selectedItem = roleAddUser.dataProvider.getItemAt(index);
                    }
                }
            }
        }

        private function validateForm():Boolean {
            var validatorErrorArray:Array = Validator.validateAll(validatorArray);
            var isValidForm:Boolean = validatorErrorArray.length == 0;
            if (isValidForm) {
                return isValidForm;
            } else {
                isValidForm = false;
                Alert.show("Niepoprawne dane.");
            }
            return isValidForm;
        }

        private function submitButton_clickHandler(event:MouseEvent):void {
            if (!validateForm()) {
                return;
            }
            if (currentUser == null) {
                var serviceUser:ServiceUser = new ServiceUser();
                serviceUser.firstName = fNameAddUser.text;
                serviceUser.lastName = lNameAddUser.text;
                serviceUser.login = loginAddUser.text;
                serviceUser.password = passwordAddUser.text;
                serviceUser.email = emailAddUser.text;
                serviceUser.role = roleAddUser.selectedItem.data;
            } else {
                currentUser.firstName = fNameAddUser.text;
                currentUser.lastName = lNameAddUser.text;
                currentUser.login = loginAddUser.text;
                currentUser.password = passwordAddUser.text;
                currentUser.email = emailAddUser.text;
                currentUser.role = roleAddUser.selectedItem.data;
            }
            var eventObject:CreateNewUserEvent = new CreateNewUserEvent(CreateNewUserEvent.CREATE_NEW_USER, serviceUser);
            dispatchEvent(eventObject);
        }

        private function formTitle(mode:String):String {
            if (mode == addMode) {
                return "Dodanie nowego użytkownika";
            }
            if (mode == editMode) {
                return "Edycja użytkownika";
            }
            return "Brak tytułu";
        }
        ]]></mx:Script>
    <mx:Metadata>
        [Event(name=CreateNewUserEvent.CREATE_NEW_USER, type="flex.admin.event.CreateNewUserEvent")]
    </mx:Metadata>
    <mx:StringValidator id="passwordValidator"  minLength="6" maxLength="100"  source="{passwordAddUser}" property="text" trigger="{submitButton}" triggerEvent="click"/>
    <mx:Validator id="userNameValidator" required="true" source="{fNameAddUser}" property="text" trigger="{submitButton}" triggerEvent="click"/>
    <mx:Validator id="userLastNameValidator" required="true" source="{lNameAddUser}" property="text" trigger="{submitButton}" triggerEvent="click"/>
    <mx:Validator id="loginValidator" required="true" source="{loginAddUser}" property="text" trigger="{submitButton}" triggerEvent="click"/>
    <mx:EmailValidator id="emailValidator" required="true"  source="{emailAddUser}" property="text"  trigger="{submitButton}" triggerEvent="click"/>
</mx:Form>