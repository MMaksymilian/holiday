<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
                layout="vertical"
                backgroundGradientColors="[0xDDEEDD,0xEEFFEE]"
                xmlns:components="flex.user.components.*"
                initialize="initializeHandler()"
                creationComplete="addEvents()"
                xmlns:componentsAdmin="flex.admin.components.*">

    <mx:Metadata>
        [Event(name=ChangeMonthEvent.CHANGED_MONTH, type="flex.user.event.ChangeMonthEvent")]
    </mx:Metadata>
    <mx:Script><![CDATA[
        import flex.admin.model.UserEntry;
        import flex.common.data.Holiday;
        import flex.common.data.ServiceUser;
        import flex.common.service.SecurityService;
        import flex.common.service.impl.SecurityServiceImpl;
        import flex.user.components.HolidayApplyForm;
        import flex.user.event.ChangeMonthEvent;
        import flex.user.event.GetSelectedDateRangeEvent;
        import flex.user.event.HolidaySendRequestEvent;
        import flex.user.file.PdfGenerator;
        import flex.user.services.UserDataService;
        import flex.user.services.impl.UserDataServiceImpl;

        import mx.collections.ArrayCollection;
        import mx.controls.Alert;
        import mx.managers.PopUpManager;
        import mx.rpc.events.ResultEvent;

        private var userDataService:UserDataService;
        private var securityService:SecurityService;

        [Bindable]
        private var currentUser:ServiceUser;
        private var holidayData:ArrayCollection;
        [Bindable]
        private var formatDateString:String = 'DD - MM - YYYY';
        private var holidayForm:HolidayApplyForm;
        private var userEntry:UserEntry;

        private function initializeHandler():void {
            securityService = new SecurityServiceImpl();
            securityService.getCurrentUser(changeCurrentUserHandler);
            /*pobranie danych do tabeli*/
            userDataService = new UserDataServiceImpl();
            getDataForMonth(getFirstOfTheMonth(new Date()));
            userDataService.getAllHolidaysMap(getPdfData);
        }

        private function addEvents():void {
            addEventListener(ChangeMonthEvent.CHANGED_MONTH, changedMonthListener);
            addEventListener(GetSelectedDateRangeEvent.SELECTED_DATE_RANGE, getDataForDateRangeListener);
        }

        private function updateDataHandler(event:ResultEvent):void {
            holidayData = new ArrayCollection();
            holidayData.source = (event.result as ArrayCollection).source;
            holidayTable.dataProvider = holidayData;
            userEntry.readUserData(holidayData);
            entryGrid.replaceEntries(userEntry);
        }

        private function updateDataRangeHandler(event:ResultEvent):void {
            holidayData = new ArrayCollection();
            holidayData.source = (event.result as ArrayCollection).source;
            holidayTable.dataProvider = holidayData;
        }

        private function changeCurrentUserHandler(event:ResultEvent):void {
            currentUser = event.result as ServiceUser;
            userEntry = new UserEntry(currentUser.firstName + " " + currentUser.lastName, currentUser.login,
                    (new Date()).getMonth(), (new Date()).getFullYear());
            entryGrid.addEntry(userEntry);
        }

        private function holidayFormSendRequestListener(event:HolidaySendRequestEvent):void {
            // jak przekazac add item do handlera, byloby fajnie
            holidayDataSlick = event.holidayData;
            userDataService.requestHoliday(event.holidayData, successfullyAddedHolidayRequestHandler);
        }

        private var holidayDataSlick:Holiday = null;

        private function successfullyAddedHolidayRequestHandler(event:ResultEvent):void {

            if (event.result == "success") {
                Alert.show('Zapisano podanie o urlop.');
                holidayData = new ArrayCollection();
                var year:int = holidayDataSlick.dateFrom.getFullYear();
                var month:int = holidayDataSlick.dateFrom.getMonth() + 1;
                if (month % 12 == 0) {
                    month = 0;
                    year += 1;
                }
                dateRange.changeDates(getFirstOfTheMonth(holidayDataSlick.dateFrom), new Date(year, month));
                userEntry = new UserEntry(currentUser.firstName + " " + currentUser.lastName, currentUser.login,
                        holidayDataSlick.dateFrom.getMonth(), holidayDataSlick.dateFrom.getFullYear());
                holidayDateChooser.selectedDate = new Date(holidayDataSlick.dateFrom.getFullYear(), holidayDataSlick.dateFrom.getMonth());
                getDataForMonth(getFirstOfTheMonth(holidayDataSlick.dateFrom));
                holidayForm.close();
            }
            if (event.result == "failure") {
                holidayForm.setButtonEnabled(true);
                Alert.show('Zapisywanie nie powiodło się.');
            }
            holidayDataSlick = null;
        }

        private function chooseDate(event:Event):void {
            var chosenDate:Date = holidayDateChooser.selectedDate;
            var from:Date = getFirstOfTheMonth(chosenDate);
            var month:int = from.getMonth();
            var year:int = from.getFullYear();
            month = (month + 1) % 12;
            if (month == 0) {
                year += 1;
            }
            var eventObject:ChangeMonthEvent = new ChangeMonthEvent(ChangeMonthEvent.CHANGED_MONTH, from, new Date(year, month, 1));
            dispatchEvent(eventObject);
        }

        private function changedMonthListener(event:ChangeMonthEvent):void {
            dateRange.changeDates(event.firstDate, event.secondDate);
            userEntry = new UserEntry(currentUser.firstName + " " + currentUser.lastName, currentUser.login, event.firstDate.getMonth(), event.firstDate.getFullYear());
            getDataForMonth(event.firstDate);
        }

        private function getDataForMonth(date:Date):void {
            userDataService.findHolidayForCurrentUserAndMonth(date, updateDataHandler)
        }

        private function getDataForDateRangeListener(event:GetSelectedDateRangeEvent):void {
            userDataService.findHolidayForCurrentUserDatesBetween(event.dateFrom, event.dateTo, updateDataRangeHandler);
        }

        private function showWindow():void {
            holidayForm = HolidayApplyForm(PopUpManager.createPopUp(this, HolidayApplyForm, true));
            holidayForm.setCurrentUser(currentUser);
            holidayForm.addEventListener(HolidaySendRequestEvent.SEND_HOLIDAY_REQUEST, holidayFormSendRequestListener);
        }

        private function getFirstOfTheMonth(currentDate:Date):Date {
            var month:int = currentDate.getMonth();
            var year:int = currentDate.getFullYear();
            return new Date(year, month, 1);
        }

        private function submitClick():void {
            fileRef = new FileReference();
            fileRef.addEventListener(IOErrorEvent.IO_ERROR, handleFileIoError);
            fileRef.save(pdfGenerator.generatePDF(), "holidays.pdf");
        }

        private var fileRef:FileReference;
        private var pdfGenerator:PdfGenerator;
        //
        //        private function fileRefSelect(event:Event):void {
        //            userDataService.getAllHolidaysMap(getPdfData);
        //        }
        private function handleFileIoError(event:IOErrorEvent):void {
            Alert.show("Zapisanie nie powiodło się");
        }

        private function getPdfData(event:ResultEvent):void {
            var mapObject:Object = (event.result as Object);
            pdfGenerator = new PdfGenerator(mapObject);
            fileChooserButton.enabled = true;
        }
        ]]></mx:Script>

    <mx:Panel width="100%" height="450" title="Panel administratora">
            <components:DateRange id="dateRange"/>
        <componentsAdmin:MonthChooser id="holidayDateChooser" yearNavigationEnabled="true" change="chooseDate(event)"/>
        <componentsAdmin:EntryGrid id="entryGrid"/>
        <mx:VBox horizontalAlign="center">
            <components:HolidayTable id="holidayTable" dateFormatString="{formatDateString}"/>
            <mx:Button horizontalCenter="0" height="32" label="Napisz podanie o urlop" click="showWindow();"/>
        </mx:VBox>
        <mx:Button id="fileChooserButton" label="raport urlopów" enabled="false" click="submitClick()"/>
    </mx:Panel>
    <mx:Style source="/flex/common/css/styles.css"/>
    <mx:Style>
        .holidayFormFillField {
            text-decoration: underline;
        }

        .dateFieldHeader {
            color:green;
            background:grey;
        }
    </mx:Style>
</mx:Application>